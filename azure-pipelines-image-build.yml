trigger:
- main

resources:
- repo: self

pool:
  name: luver-pool
  
variables:
  backend-tag: 'backend-image-v$(Build.BuildId)'
  frontend-tag: 'frontend-image-v$(Build.BuildId)'
  dockerhub-registry-connection: connect-profile-dockerhub
  dockerhub-repo: luverk1d/dotnet-project-for-altenar

stages:
# - stage: CI
#   displayName: Build an app and push do docker registry
#   jobs:
#   - job: Docker-work
#     displayName: Build a docker image and push
#     steps:
#     - task: Docker@2
#       displayName: Login into docker account
#       inputs:
#         command: login
#         containerRegistry: $(dockerhub-registry-connection)

#     - task: Docker@2
#       displayName: Build a backend image
#       inputs:
#         command: buildAndPush
#         dockerfile: '$(Build.SourcesDirectory)/todolistAltenar/backend/dockerfile'
#         repository: $(dockerhub-repo)
#         tags: |
#           $(backend-tag)

#     - task: Docker@2
#       displayName: Build a frontend image
    #   inputs:
    #     command: buildAndPush
    #     dockerfile: '$(Build.SourcesDirectory)/todolistAltenar/frontend/dockerfile'
    #     repository: $(dockerhub-repo)
    #     tags: |
    #       $(frontend-tag)

    # - task: Docker@2
    #   displayName: Logout from docker account
    #   inputs:
    #     command: logout
    #     containerRegistry: $(dockerhub-registry-connection)
  
- stage: CD
  displayName: Db update by migration
  jobs: 
  - job: Migration_work
    displayName: Update db via dotnet migrations
    steps:
    - task: Bash@3
      displayName: dotnet-ef tool instattion check
      inputs:
        targetType: inline
        script: |
          if dotnet tool list -g | grep dotnet-ef; then
            echo "##vso[task.setvariable variable=isInstalled]true"
          else
            echo "##vso[task.setvariable variable=isInstalled]false"
          fi
        
    - task: Bash@3
      inputs:
        targetType: inline
        script: "echo $(isInstalled)"

    # - task: Bash@3
    #   displayName: Install dotnet-ef tool
    #   inputs:
    #     targetType: inline
    #     script: dotnet tool install --global dotnet-ef
      
    # - task: Bash@3
    #   displayName: updatee db
    #   inputs:
    #     targetType: inline
    #     script: dotnet ef database update --connection $(CONNECTION-STRING)