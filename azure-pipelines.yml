trigger:
- main

resources:
- repo: self

pool:
  name: luver-pool
  
variables:
  dockerhub-registry-connection: connect-profile-dockerhub
  dockerhub-repo: luverk1d/dotnet-project-for-altenar

stages:
- stage: CI
  displayName: Build an app and push do docker registry
  jobs:
  - job: Git_versioning
    displayName: Calculate new version and create tag/release
    steps:
      - checkout: self
        fetchDepth: 0

      - task: gitversion-setup@4
        displayName: Gitversion install
        inputs:
          versionSpec: '6.4.x'

      - task: gitversion-execute@4
        name: gitVersion_vars
        displayName: Calculate git version

  - job: Docker_build
    displayName: Build a docker image
    dependsOn: Git_versioning
    variables:
      gitVersion: $[ dependencies.Git_versioning.outputs['gitVersion_vars.GitVersion_FullSemVer'] ]
      backend-tag: 'backend-image-v$(gitVersion)'
      frontend-tag: 'frontend-image-v$(gitVersion)'
    steps:
    - task: Docker@2
      displayName: Login into docker account
      inputs:
        command: login
        containerRegistry: $(dockerhub-registry-connection)

    - task: Docker@2
      displayName: Build a backend image
      name: Build_backend_docker_image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/todolistAltenar/backend/dockerfile'
        repository: $(dockerhub-repo)
        tags: |
          $(backend-tag)

    - task: Docker@2
      displayName: Build a frontend image
      name: Build_frontend_docker_image
      inputs:
        command: build
        dockerfile: '$(Build.SourcesDirectory)/todolistAltenar/frontend/dockerfile'
        repository: $(dockerhub-repo)
        tags: |
          $(frontend-tag)

    - task: Bash@3
      displayName: outputVars
      name: docker_tag_variables
      inputs:
        targetType: inline
        script: |
          echo "##vso[task.setvariable variable=docker_backend_tag;isOutput=true]$(backend-tag)"
          echo "##vso[task.setvariable variable=docker_frontend_tag;isOutput=true]$(frontend-tag)"

  - job: Api_tests
    displayName: Api test for new docker image
    dependsOn: Docker_build
    variables:
      backend-tag: $[ dependencies.Docker_build.outputs['docker_tag_variables.docker_backend_tag'] ]
      frontend-tag: $[ dependencies.Docker_build.outputs['docker_tag_variables.docker_frontend_tag'] ]
      container-name: backend-test-container
      temp-app-backend-port: 2020
    steps:
      - task: Bash@3
        displayName: Start backend container
        inputs:
          targetType: inline
          script: | 
            docker run -d --name $(container-name) --env ConnectionStrings__todolistDbContext="$(CONNECTION-STRING)" -p $(temp-app-backend-port):$(BACKEND-APP-PORT) $(dockerhub-repo):$(backend-tag)
      
      - task: Bash@3
        displayName: Start tests
        inputs:
          workingDirectory: "todolistAltenar/TodolistApiTest/"
          targetType: inline
          script: |
            mvn test

      - task: Bash@3
        displayName: Set output variables
        name: docker_container_backend_vars
        inputs:
          targetType: inline
          script: |
            echo "##vso[task.setvariable variable=backend-docker-container-name;isOutput=true]$(container-name)"

      # - task: Maven@4
      #   displayName: Start tests 
      #   inputs:
      #     mavenDirectory: "todolistAltenar/TodolistApiTest"
      #     mavenPomFile: "pom.xml"

  - job: Push_docker_images
    displayName: Push tested images to dockerhub
    dependsOn: Api_tests
    variables:
      backend-tag: $[ dependencies.Docker_build.outputs['docker_tag_variables.docker_backend_tag'] ]
      frontend-tag: $[ dependencies.Docker_build.outputs['docker_tag_variables.docker_frontend_tag'] ]
    steps:
      - task: Docker@2
        displayName: Push backend image
        inputs:
          command: push
          repository: $(dockerhub-repo)
          tags: |
            $(backend-tag)

      - task: Docker@2
        displayName: Push frontend image
        inputs:
          command: push
          repository: $(dockerhub-repo)
          tags: |
            $(frontend-tag)

      - task: Docker@2
        displayName: Logout from docker account
        inputs:
          command: logout
          containerRegistry: $(dockerhub-registry-connection)

  - job: Clean_all
    displayName: Clean all from host
    dependsOn: Push_docker_images
    variables:
      backend-tag: $[ dependencies.Docker_build.outputs['docker_tag_variables.docker_backend_tag'] ]
      frontend-tag: $[ dependencies.Docker_build.outputs['docker_tag_variables.docker_frontend_tag'] ]
      backend-container-name: $[ dependencies.Api_tests.outputs['docker_container_backend_vars.backend-docker-container-name'] ]
    steps:
      - task: Bash@3
        displayName: Stop all running containers
        inputs:
          targetType: inline
          script: |
            docker stop $(backend-container-name)
        
      - task: Bash@3
        displayName: Delete all images
        inputs:
          targetType: inline
          script: |
            docker image rm $(dockerhub-repo):$(backend-tag)
            docker image rm $(dockerhub-repo):$(frontend-tag)

- stage: CD
  displayName: Db update by migration
  jobs: 
  - job: Migration_work
    displayName: Update db via dotnet migrations
    steps:
    - task: Bash@3
      displayName: dotnet-ef tool installation check
      inputs:
        targetType: inline
        script: |
          if dotnet tool list | grep dotnet-ef; then
            echo "##vso[task.setvariable variable=isInstalled]true"
          else
            echo "##vso[task.setvariable variable=isInstalled]false"
          fi

    - task: Bash@3
      displayName: Install dotnet-ef tool
      inputs:
        targetType: inline
        script: |
          if [ "$(isInstalled)" = "false" ]; then
            dotnet new tool-manifest
            dotnet tool install dotnet-ef
          fi
        workingDirectory: "$(Build.SourcesDirectory)"

    - task: Bash@3
      displayName: updatee db
      inputs:
        targetType: inline
        script: dotnet ef database update --connection "$(CONNECTION-STRING)"
        workingDirectory: "$(Build.SourcesDirectory)/todolistAltenar/backend/todolistProject.API"