// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using todolistProject.dataAccess;

#nullable disable

namespace todolistProject.dataAccess.Migrations
{
    [DbContext(typeof(todolistDbContext))]
    [Migration("20250625123358_remove-noteStorage")]
    partial class removenoteStorage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("todolistProject.dataAccess.Entities.GroupEntity", b =>
                {
                    b.Property<Guid>("idGroup")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idgroup");

                    b.Property<string>("titleGroup")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titlegroup");

                    b.Property<Guid>("userID")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("idGroup");

                    b.HasIndex("userID");

                    b.ToTable("Group");
                });

            modelBuilder.Entity("todolistProject.dataAccess.Entities.NoteEntity", b =>
                {
                    b.Property<Guid>("idNote")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("idnote");

                    b.Property<string>("contentNote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("ContentNote");

                    b.Property<Guid>("groupID")
                        .HasColumnType("uuid")
                        .HasColumnName("groupid");

                    b.Property<string>("titleNote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("titlenote");

                    b.Property<Guid>("userID")
                        .HasColumnType("uuid")
                        .HasColumnName("userid");

                    b.HasKey("idNote");

                    b.HasIndex("groupID");

                    b.HasIndex("userID");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("todolistProject.dataAccess.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("idUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("iduser");

                    b.Property<string>("userEmail")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("useremail");

                    b.Property<string>("userPassword")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("userpassword");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("idUser");

                    b.ToTable("User");
                });

            modelBuilder.Entity("todolistProject.dataAccess.Entities.GroupEntity", b =>
                {
                    b.HasOne("todolistProject.dataAccess.Entities.UserEntity", "user")
                        .WithMany("Groups")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("user");
                });

            modelBuilder.Entity("todolistProject.dataAccess.Entities.NoteEntity", b =>
                {
                    b.HasOne("todolistProject.dataAccess.Entities.GroupEntity", "group")
                        .WithMany("notes")
                        .HasForeignKey("groupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("todolistProject.dataAccess.Entities.UserEntity", "user")
                        .WithMany("notes")
                        .HasForeignKey("userID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("user");
                });

            modelBuilder.Entity("todolistProject.dataAccess.Entities.GroupEntity", b =>
                {
                    b.Navigation("notes");
                });

            modelBuilder.Entity("todolistProject.dataAccess.Entities.UserEntity", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("notes");
                });
#pragma warning restore 612, 618
        }
    }
}
